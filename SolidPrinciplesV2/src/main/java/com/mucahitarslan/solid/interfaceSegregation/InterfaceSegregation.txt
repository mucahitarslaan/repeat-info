- Sorumlulukların hepsini tek bir arayüze toplamak yerine daha özelleştirilmiş birden
  fazla arayüz oluşturmayı tercih etmemizi söyleyen prensiptir.

-Tek bir interface yerine kullanımlarına göre parçalanmış birden fazla interface ile işlemleri yürütmeliyiz.
 Yani her farklı sorumluluğun kendine özgü bir arayüzü olması gerekmektedir. Böylece interface’i kullanan kişide
 sadece ihtiyacı olanlarla ilgilenmiş olur. Birden fazla amaç için yalnızca bir arayüzümüz var ise buna gerektiğinden
 fazla method ya da özellik ekliyoruz demektir, bu da IS prensibine aykırı davrandığınız anlamına gelir.

- Nesneler asla ihtiyacı olmayan property/metot vs içeren interfaceleri implement etmeye zorlanmamalıdır

- Görüldüğü gibi single responsibility ve interface segregation prensipleri birbirine oldukça yakın ve aynı amaca hizmet
  eden prensiplerdir. Tek fark ise Interface segregation arayüz(interface)ler ile ilgilenirken,
  Single responsibility sınıflarla ilgilenmektedir.

- Bir methodun IS prensibine uymayan interface’e eklenmesi veya bir method üzerindeki değişiklik, Bu interface’i
  kullanan(implement etmiş) tüm sınıfları değiştirmemizi gerektirir. Bir arayüz yazarken, farklı sorumlulukları ya da
  farklı davranış gruplarını her zaman farklı arayüzlere ayırmak önemlidir.


